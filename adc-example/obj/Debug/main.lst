                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Thu Apr 16 19:30:44 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module main
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _ADC1_GetConversionValue
                                     14 	.globl _ADC1_StartConversion
                                     15 	.globl _ADC1_Init
                                     16 	.globl _ADC1_DeInit
                                     17 	.globl _UART2_SendData8
                                     18 	.globl _UART2_Init
                                     19 	.globl _UART2_DeInit
                                     20 	.globl _GPIO_WriteReverse
                                     21 	.globl _GPIO_Init
                                     22 	.globl _GPIO_DeInit
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area INITIALIZED
                                     31 ;--------------------------------------------------------
                                     32 ; Stack segment in internal ram 
                                     33 ;--------------------------------------------------------
                                     34 	.area	SSEG
      000000                         35 __start__stack:
      000000                         36 	.ds	1
                                     37 
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 ;--------------------------------------------------------
                                     43 ; interrupt vector 
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
      000000                         46 __interrupt_vect:
      000000 82v00u00u00             47 	int s_GSINIT ;reset
      000004 82 00 00 00             48 	int 0x0000 ;trap
      000008 82 00 00 00             49 	int 0x0000 ;int0
      00000C 82 00 00 00             50 	int 0x0000 ;int1
      000010 82 00 00 00             51 	int 0x0000 ;int2
      000014 82 00 00 00             52 	int 0x0000 ;int3
      000018 82 00 00 00             53 	int 0x0000 ;int4
      00001C 82 00 00 00             54 	int 0x0000 ;int5
      000020 82 00 00 00             55 	int 0x0000 ;int6
      000024 82 00 00 00             56 	int 0x0000 ;int7
      000028 82 00 00 00             57 	int 0x0000 ;int8
      00002C 82 00 00 00             58 	int 0x0000 ;int9
      000030 82 00 00 00             59 	int 0x0000 ;int10
      000034 82 00 00 00             60 	int 0x0000 ;int11
      000038 82 00 00 00             61 	int 0x0000 ;int12
      00003C 82 00 00 00             62 	int 0x0000 ;int13
      000040 82 00 00 00             63 	int 0x0000 ;int14
      000044 82 00 00 00             64 	int 0x0000 ;int15
      000048 82 00 00 00             65 	int 0x0000 ;int16
      00004C 82 00 00 00             66 	int 0x0000 ;int17
      000050 82 00 00 00             67 	int 0x0000 ;int18
      000054 82 00 00 00             68 	int 0x0000 ;int19
      000058 82 00 00 00             69 	int 0x0000 ;int20
      00005C 82 00 00 00             70 	int 0x0000 ;int21
      000060 82 00 00 00             71 	int 0x0000 ;int22
      000064 82 00 00 00             72 	int 0x0000 ;int23
      000068 82 00 00 00             73 	int 0x0000 ;int24
      00006C 82 00 00 00             74 	int 0x0000 ;int25
      000070 82 00 00 00             75 	int 0x0000 ;int26
      000074 82 00 00 00             76 	int 0x0000 ;int27
      000078 82 00 00 00             77 	int 0x0000 ;int28
      00007C 82 00 00 00             78 	int 0x0000 ;int29
                                     79 ;--------------------------------------------------------
                                     80 ; global & static initialisations
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME
                                     83 	.area GSINIT
                                     84 	.area GSFINAL
                                     85 	.area GSINIT
      000000                         86 __sdcc_gs_init_startup:
      000000                         87 __sdcc_init_data:
                                     88 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   89 	ldw x, #l_DATA
      000003 27 07            [ 1]   90 	jreq	00002$
      000005                         91 00001$:
      000005 72 4FuFFuFF      [ 1]   92 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   93 	decw x
      00000A 26 F9            [ 1]   94 	jrne	00001$
      00000C                         95 00002$:
      00000C AEr00r00         [ 2]   96 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   97 	jreq	00004$
      000011                         98 00003$:
      000011 D6uFFuFF         [ 1]   99 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  100 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  101 	decw	x
      000018 26 F7            [ 1]  102 	jrne	00003$
      00001A                        103 00004$:
                                    104 ; stm8_genXINIT() end
                                    105 	.area GSFINAL
      000000 CCr00r80         [ 2]  106 	jp	__sdcc_program_startup
                                    107 ;--------------------------------------------------------
                                    108 ; Home
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME
                                    111 	.area HOME
      000080                        112 __sdcc_program_startup:
      000080 CCr00r00         [ 2]  113 	jp	_main
                                    114 ;	return from main will return to caller
                                    115 ;--------------------------------------------------------
                                    116 ; code
                                    117 ;--------------------------------------------------------
                                    118 	.area CODE
                                    119 ;	main.c: 11: int main( void ){
                                    120 ;	-----------------------------------------
                                    121 ;	 function main
                                    122 ;	-----------------------------------------
      000000                        123 _main:
      000000 52 20            [ 2]  124 	sub	sp, #32
                                    125 ;	main.c: 18: uint16_t nAdc_Buffer[10] = {0,0,0,0,0,0,0,0,0,0};
      000002 96               [ 1]  126 	ldw	x, sp
      000003 1C 00 03         [ 2]  127 	addw	x, #3
      000006 1F 1F            [ 2]  128 	ldw	(0x1f, sp), x
      000008 1E 1F            [ 2]  129 	ldw	x, (0x1f, sp)
      00000A 6F 01            [ 1]  130 	clr	(0x1, x)
      00000C 7F               [ 1]  131 	clr	(x)
      00000D 1E 1F            [ 2]  132 	ldw	x, (0x1f, sp)
      00000F 5C               [ 2]  133 	incw	x
      000010 5C               [ 2]  134 	incw	x
      000011 6F 01            [ 1]  135 	clr	(0x1, x)
      000013 7F               [ 1]  136 	clr	(x)
      000014 1E 1F            [ 2]  137 	ldw	x, (0x1f, sp)
      000016 1C 00 04         [ 2]  138 	addw	x, #0x0004
      000019 6F 01            [ 1]  139 	clr	(0x1, x)
      00001B 7F               [ 1]  140 	clr	(x)
      00001C 1E 1F            [ 2]  141 	ldw	x, (0x1f, sp)
      00001E 1C 00 06         [ 2]  142 	addw	x, #0x0006
      000021 6F 01            [ 1]  143 	clr	(0x1, x)
      000023 7F               [ 1]  144 	clr	(x)
      000024 1E 1F            [ 2]  145 	ldw	x, (0x1f, sp)
      000026 1C 00 08         [ 2]  146 	addw	x, #0x0008
      000029 6F 01            [ 1]  147 	clr	(0x1, x)
      00002B 7F               [ 1]  148 	clr	(x)
      00002C 1E 1F            [ 2]  149 	ldw	x, (0x1f, sp)
      00002E 1C 00 0A         [ 2]  150 	addw	x, #0x000a
      000031 6F 01            [ 1]  151 	clr	(0x1, x)
      000033 7F               [ 1]  152 	clr	(x)
      000034 1E 1F            [ 2]  153 	ldw	x, (0x1f, sp)
      000036 1C 00 0C         [ 2]  154 	addw	x, #0x000c
      000039 6F 01            [ 1]  155 	clr	(0x1, x)
      00003B 7F               [ 1]  156 	clr	(x)
      00003C 1E 1F            [ 2]  157 	ldw	x, (0x1f, sp)
      00003E 1C 00 0E         [ 2]  158 	addw	x, #0x000e
      000041 6F 01            [ 1]  159 	clr	(0x1, x)
      000043 7F               [ 1]  160 	clr	(x)
      000044 1E 1F            [ 2]  161 	ldw	x, (0x1f, sp)
      000046 1C 00 10         [ 2]  162 	addw	x, #0x0010
      000049 6F 01            [ 1]  163 	clr	(0x1, x)
      00004B 7F               [ 1]  164 	clr	(x)
      00004C 1E 1F            [ 2]  165 	ldw	x, (0x1f, sp)
      00004E 1C 00 12         [ 2]  166 	addw	x, #0x0012
      000051 6F 01            [ 1]  167 	clr	(0x1, x)
      000053 7F               [ 1]  168 	clr	(x)
                                    169 ;	main.c: 19: uint16_t nAdc_Hold = 0;
      000054 5F               [ 1]  170 	clrw	x
      000055 1F 01            [ 2]  171 	ldw	(0x01, sp), x
                                    172 ;	main.c: 22: GPIO_DeInit(GPIOD);
      000057 4B 0F            [ 1]  173 	push	#0x0f
      000059 4B 50            [ 1]  174 	push	#0x50
      00005B CDr00r00         [ 4]  175 	call	_GPIO_DeInit
      00005E 5B 02            [ 2]  176 	addw	sp, #2
                                    177 ;	main.c: 32: UART_Config();
      000060 CDr00rDE         [ 4]  178 	call	_UART_Config
                                    179 ;	main.c: 35: ADC_Config();
      000063 CDr00rF7         [ 4]  180 	call	_ADC_Config
                                    181 ;	main.c: 37: ADC1_StartConversion();
      000066 CDr00r00         [ 4]  182 	call	_ADC1_StartConversion
                                    183 ;	main.c: 39: GPIO_Init(GPIOD, GPIO_PIN_0, GPIO_MODE_OUT_PP_LOW_FAST);
      000069 4B E0            [ 1]  184 	push	#0xe0
      00006B 4B 01            [ 1]  185 	push	#0x01
      00006D 4B 0F            [ 1]  186 	push	#0x0f
      00006F 4B 50            [ 1]  187 	push	#0x50
      000071 CDr00r00         [ 4]  188 	call	_GPIO_Init
      000074 5B 04            [ 2]  189 	addw	sp, #4
                                    190 ;	main.c: 42: for(i=0;i<20000;i++) // A delay loop
      000076                        191 00116$:
      000076 AE 4E 20         [ 2]  192 	ldw	x, #0x4e20
      000079                        193 00109$:
                                    194 ;	main.c: 44: nop();
      000079 9D               [ 1]  195 	nop
      00007A 5A               [ 2]  196 	decw	x
                                    197 ;	main.c: 42: for(i=0;i<20000;i++) // A delay loop
      00007B 5D               [ 2]  198 	tnzw	x
      00007C 26 FB            [ 1]  199 	jrne	00109$
                                    200 ;	main.c: 48: GPIO_WriteReverse(GPIOD, GPIO_PIN_0);
      00007E 4B 01            [ 1]  201 	push	#0x01
      000080 4B 0F            [ 1]  202 	push	#0x0f
      000082 4B 50            [ 1]  203 	push	#0x50
      000084 CDr00r00         [ 4]  204 	call	_GPIO_WriteReverse
      000087 5B 03            [ 2]  205 	addw	sp, #3
                                    206 ;	main.c: 50: for ( nCount = 0; nCount< 10; nCount++){
      000089 5F               [ 1]  207 	clrw	x
      00008A 1F 19            [ 2]  208 	ldw	(0x19, sp), x
      00008C                        209 00110$:
                                    210 ;	main.c: 51: nAdc_Buffer[nCount] = ADC1_GetConversionValue();
      00008C 1E 19            [ 2]  211 	ldw	x, (0x19, sp)
      00008E 58               [ 2]  212 	sllw	x
      00008F 1F 1D            [ 2]  213 	ldw	(0x1d, sp), x
      000091 1E 1F            [ 2]  214 	ldw	x, (0x1f, sp)
      000093 72 FB 1D         [ 2]  215 	addw	x, (0x1d, sp)
      000096 1F 1B            [ 2]  216 	ldw	(0x1b, sp), x
      000098 CDr00r00         [ 4]  217 	call	_ADC1_GetConversionValue
      00009B 16 1B            [ 2]  218 	ldw	y, (0x1b, sp)
      00009D 90 FF            [ 2]  219 	ldw	(y), x
                                    220 ;	main.c: 52: nAdc_Hold += nAdc_Buffer[nCount];
      00009F 72 FB 01         [ 2]  221 	addw	x, (0x01, sp)
      0000A2 1F 01            [ 2]  222 	ldw	(0x01, sp), x
                                    223 ;	main.c: 50: for ( nCount = 0; nCount< 10; nCount++){
      0000A4 1E 19            [ 2]  224 	ldw	x, (0x19, sp)
      0000A6 5C               [ 2]  225 	incw	x
      0000A7 1F 19            [ 2]  226 	ldw	(0x19, sp), x
      0000A9 1E 19            [ 2]  227 	ldw	x, (0x19, sp)
      0000AB A3 00 0A         [ 2]  228 	cpw	x, #0x000a
      0000AE 25 DC            [ 1]  229 	jrc	00110$
                                    230 ;	main.c: 54: nAdc_Buffer[0] = nAdc_Hold / 10;
      0000B0 1E 01            [ 2]  231 	ldw	x, (0x01, sp)
      0000B2 90 AE 00 0A      [ 2]  232 	ldw	y, #0x000a
      0000B6 65               [ 2]  233 	divw	x, y
      0000B7 16 1F            [ 2]  234 	ldw	y, (0x1f, sp)
      0000B9 90 FF            [ 2]  235 	ldw	(y), x
                                    236 ;	main.c: 55: adc_value = nAdc_Buffer[0];
      0000BB 1F 17            [ 2]  237 	ldw	(0x17, sp), x
                                    238 ;	main.c: 59: for ( nCount = 0; nCount< 10; nCount++){
      0000BD 90 5F            [ 1]  239 	clrw	y
      0000BF                        240 00112$:
                                    241 ;	main.c: 60: nAdc_Buffer[nCount] = 0;
      0000BF 93               [ 1]  242 	ldw	x, y
      0000C0 58               [ 2]  243 	sllw	x
      0000C1 72 FB 1F         [ 2]  244 	addw	x, (0x1f, sp)
      0000C4 6F 01            [ 1]  245 	clr	(0x1, x)
      0000C6 7F               [ 1]  246 	clr	(x)
                                    247 ;	main.c: 59: for ( nCount = 0; nCount< 10; nCount++){
      0000C7 90 5C            [ 2]  248 	incw	y
      0000C9 90 A3 00 0A      [ 2]  249 	cpw	y, #0x000a
      0000CD 25 F0            [ 1]  250 	jrc	00112$
                                    251 ;	main.c: 62: nAdc_Hold = 0;
      0000CF 5F               [ 1]  252 	clrw	x
      0000D0 1F 01            [ 2]  253 	ldw	(0x01, sp), x
                                    254 ;	main.c: 69: UART2_SendData8((uint8_t)adc_value);
      0000D2 7B 18            [ 1]  255 	ld	a, (0x18, sp)
      0000D4 88               [ 1]  256 	push	a
      0000D5 CDr00r00         [ 4]  257 	call	_UART2_SendData8
      0000D8 84               [ 1]  258 	pop	a
      0000D9 20 9B            [ 2]  259 	jra	00116$
      0000DB 5B 20            [ 2]  260 	addw	sp, #32
      0000DD 81               [ 4]  261 	ret
                                    262 ;	main.c: 75: static void UART_Config(void){
                                    263 ;	-----------------------------------------
                                    264 ;	 function UART_Config
                                    265 ;	-----------------------------------------
      0000DE                        266 _UART_Config:
                                    267 ;	main.c: 77: UART2_DeInit();
      0000DE CDr00r00         [ 4]  268 	call	_UART2_DeInit
                                    269 ;	main.c: 78: UART2_Init((uint32_t)9600, UART2_WORDLENGTH_8D, UART2_STOPBITS_1, UART2_PARITY_NO, UART2_SYNCMODE_CLOCK_DISABLE, UART2_MODE_TXRX_ENABLE );
      0000E1 4B 0C            [ 1]  270 	push	#0x0c
      0000E3 4B 80            [ 1]  271 	push	#0x80
      0000E5 4B 00            [ 1]  272 	push	#0x00
      0000E7 4B 00            [ 1]  273 	push	#0x00
      0000E9 4B 00            [ 1]  274 	push	#0x00
      0000EB 4B 80            [ 1]  275 	push	#0x80
      0000ED 4B 25            [ 1]  276 	push	#0x25
      0000EF 5F               [ 1]  277 	clrw	x
      0000F0 89               [ 2]  278 	pushw	x
      0000F1 CDr00r00         [ 4]  279 	call	_UART2_Init
      0000F4 5B 09            [ 2]  280 	addw	sp, #9
      0000F6 81               [ 4]  281 	ret
                                    282 ;	main.c: 81: static void ADC_Config( void ){
                                    283 ;	-----------------------------------------
                                    284 ;	 function ADC_Config
                                    285 ;	-----------------------------------------
      0000F7                        286 _ADC_Config:
                                    287 ;	main.c: 82: GPIO_Init(GPIOB, GPIO_PIN_0, GPIO_MODE_IN_FL_NO_IT );
      0000F7 4B 00            [ 1]  288 	push	#0x00
      0000F9 4B 01            [ 1]  289 	push	#0x01
      0000FB 4B 05            [ 1]  290 	push	#0x05
      0000FD 4B 50            [ 1]  291 	push	#0x50
      0000FF CDr00r00         [ 4]  292 	call	_GPIO_Init
      000102 5B 04            [ 2]  293 	addw	sp, #4
                                    294 ;	main.c: 83: ADC1_DeInit();
      000104 CDr00r00         [ 4]  295 	call	_ADC1_DeInit
                                    296 ;	main.c: 84: ADC1_Init(ADC1_CONVERSIONMODE_CONTINUOUS, ADC1_CHANNEL_0, ADC1_PRESSEL_FCPU_D2, ADC1_EXTTRIG_TIM,DISABLE, ADC1_ALIGN_RIGHT, ADC1_SCHMITTTRIG_CHANNEL0, DISABLE );
      000107 4B 00            [ 1]  297 	push	#0x00
      000109 4B 00            [ 1]  298 	push	#0x00
      00010B 4B 08            [ 1]  299 	push	#0x08
      00010D 4B 00            [ 1]  300 	push	#0x00
      00010F 4B 00            [ 1]  301 	push	#0x00
      000111 4B 00            [ 1]  302 	push	#0x00
      000113 4B 00            [ 1]  303 	push	#0x00
      000115 4B 01            [ 1]  304 	push	#0x01
      000117 CDr00r00         [ 4]  305 	call	_ADC1_Init
      00011A 5B 08            [ 2]  306 	addw	sp, #8
      00011C 81               [ 4]  307 	ret
                                    308 	.area CODE
                                    309 	.area INITIALIZER
                                    310 	.area CABS (ABS)
