                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Thu Apr 16 17:18:44 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module stm8s_adc1
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _ADC1_DeInit
                                     13 	.globl _ADC1_Init
                                     14 	.globl _ADC1_Cmd
                                     15 	.globl _ADC1_ScanModeCmd
                                     16 	.globl _ADC1_DataBufferCmd
                                     17 	.globl _ADC1_ITConfig
                                     18 	.globl _ADC1_PrescalerConfig
                                     19 	.globl _ADC1_SchmittTriggerConfig
                                     20 	.globl _ADC1_ConversionConfig
                                     21 	.globl _ADC1_ExternalTriggerConfig
                                     22 	.globl _ADC1_StartConversion
                                     23 	.globl _ADC1_GetConversionValue
                                     24 	.globl _ADC1_AWDChannelConfig
                                     25 	.globl _ADC1_SetHighThreshold
                                     26 	.globl _ADC1_SetLowThreshold
                                     27 	.globl _ADC1_GetBufferValue
                                     28 	.globl _ADC1_GetAWDChannelStatus
                                     29 	.globl _ADC1_GetFlagStatus
                                     30 	.globl _ADC1_ClearFlag
                                     31 	.globl _ADC1_GetITStatus
                                     32 	.globl _ADC1_ClearITPendingBit
                                     33 ;--------------------------------------------------------
                                     34 ; ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DATA
                                     37 ;--------------------------------------------------------
                                     38 ; ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area INITIALIZED
                                     41 ;--------------------------------------------------------
                                     42 ; absolute external ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area DABS (ABS)
                                     45 ;--------------------------------------------------------
                                     46 ; global & static initialisations
                                     47 ;--------------------------------------------------------
                                     48 	.area HOME
                                     49 	.area GSINIT
                                     50 	.area GSFINAL
                                     51 	.area GSINIT
                                     52 ;--------------------------------------------------------
                                     53 ; Home
                                     54 ;--------------------------------------------------------
                                     55 	.area HOME
                                     56 	.area HOME
                                     57 ;--------------------------------------------------------
                                     58 ; code
                                     59 ;--------------------------------------------------------
                                     60 	.area CODE
                                     61 ;	stm8s_adc1.c: 52: void ADC1_DeInit(void)
                                     62 ;	-----------------------------------------
                                     63 ;	 function ADC1_DeInit
                                     64 ;	-----------------------------------------
      000000                         65 _ADC1_DeInit:
                                     66 ;	stm8s_adc1.c: 54: ADC1->CSR  = ADC1_CSR_RESET_VALUE;
      000000 AE 54 00         [ 2]   67 	ldw	x, #0x5400
      000003 7F               [ 1]   68 	clr	(x)
                                     69 ;	stm8s_adc1.c: 55: ADC1->CR1  = ADC1_CR1_RESET_VALUE;
      000004 AE 54 01         [ 2]   70 	ldw	x, #0x5401
      000007 7F               [ 1]   71 	clr	(x)
                                     72 ;	stm8s_adc1.c: 56: ADC1->CR2  = ADC1_CR2_RESET_VALUE;
      000008 AE 54 02         [ 2]   73 	ldw	x, #0x5402
      00000B 7F               [ 1]   74 	clr	(x)
                                     75 ;	stm8s_adc1.c: 57: ADC1->CR3  = ADC1_CR3_RESET_VALUE;
      00000C AE 54 03         [ 2]   76 	ldw	x, #0x5403
      00000F 7F               [ 1]   77 	clr	(x)
                                     78 ;	stm8s_adc1.c: 58: ADC1->TDRH = ADC1_TDRH_RESET_VALUE;
      000010 AE 54 06         [ 2]   79 	ldw	x, #0x5406
      000013 7F               [ 1]   80 	clr	(x)
                                     81 ;	stm8s_adc1.c: 59: ADC1->TDRL = ADC1_TDRL_RESET_VALUE;
      000014 AE 54 07         [ 2]   82 	ldw	x, #0x5407
      000017 7F               [ 1]   83 	clr	(x)
                                     84 ;	stm8s_adc1.c: 60: ADC1->HTRH = ADC1_HTRH_RESET_VALUE;
      000018 AE 54 08         [ 2]   85 	ldw	x, #0x5408
      00001B A6 FF            [ 1]   86 	ld	a, #0xff
      00001D F7               [ 1]   87 	ld	(x), a
                                     88 ;	stm8s_adc1.c: 61: ADC1->HTRL = ADC1_HTRL_RESET_VALUE;
      00001E AE 54 09         [ 2]   89 	ldw	x, #0x5409
      000021 A6 03            [ 1]   90 	ld	a, #0x03
      000023 F7               [ 1]   91 	ld	(x), a
                                     92 ;	stm8s_adc1.c: 62: ADC1->LTRH = ADC1_LTRH_RESET_VALUE;
      000024 AE 54 0A         [ 2]   93 	ldw	x, #0x540a
      000027 7F               [ 1]   94 	clr	(x)
                                     95 ;	stm8s_adc1.c: 63: ADC1->LTRL = ADC1_LTRL_RESET_VALUE;
      000028 AE 54 0B         [ 2]   96 	ldw	x, #0x540b
      00002B 7F               [ 1]   97 	clr	(x)
                                     98 ;	stm8s_adc1.c: 64: ADC1->AWCRH = ADC1_AWCRH_RESET_VALUE;
      00002C AE 54 0E         [ 2]   99 	ldw	x, #0x540e
      00002F 7F               [ 1]  100 	clr	(x)
                                    101 ;	stm8s_adc1.c: 65: ADC1->AWCRL = ADC1_AWCRL_RESET_VALUE;
      000030 AE 54 0F         [ 2]  102 	ldw	x, #0x540f
      000033 7F               [ 1]  103 	clr	(x)
      000034 81               [ 4]  104 	ret
                                    105 ;	stm8s_adc1.c: 88: void ADC1_Init(ADC1_ConvMode_TypeDef ADC1_ConversionMode, ADC1_Channel_TypeDef ADC1_Channel, ADC1_PresSel_TypeDef ADC1_PrescalerSelection, ADC1_ExtTrig_TypeDef ADC1_ExtTrigger, FunctionalState ADC1_ExtTriggerState, ADC1_Align_TypeDef ADC1_Align, ADC1_SchmittTrigg_TypeDef ADC1_SchmittTriggerChannel, FunctionalState ADC1_SchmittTriggerState)
                                    106 ;	-----------------------------------------
                                    107 ;	 function ADC1_Init
                                    108 ;	-----------------------------------------
      000035                        109 _ADC1_Init:
                                    110 ;	stm8s_adc1.c: 103: ADC1_ConversionConfig(ADC1_ConversionMode, ADC1_Channel, ADC1_Align);
      000035 7B 08            [ 1]  111 	ld	a, (0x08, sp)
      000037 88               [ 1]  112 	push	a
      000038 7B 05            [ 1]  113 	ld	a, (0x05, sp)
      00003A 88               [ 1]  114 	push	a
      00003B 7B 05            [ 1]  115 	ld	a, (0x05, sp)
      00003D 88               [ 1]  116 	push	a
      00003E CDr01r75         [ 4]  117 	call	_ADC1_ConversionConfig
      000041 5B 03            [ 2]  118 	addw	sp, #3
                                    119 ;	stm8s_adc1.c: 105: ADC1_PrescalerConfig(ADC1_PrescalerSelection);
      000043 7B 05            [ 1]  120 	ld	a, (0x05, sp)
      000045 88               [ 1]  121 	push	a
      000046 CDr00rC4         [ 4]  122 	call	_ADC1_PrescalerConfig
      000049 84               [ 1]  123 	pop	a
                                    124 ;	stm8s_adc1.c: 110: ADC1_ExternalTriggerConfig(ADC1_ExtTrigger, ADC1_ExtTriggerState);
      00004A 7B 07            [ 1]  125 	ld	a, (0x07, sp)
      00004C 88               [ 1]  126 	push	a
      00004D 7B 07            [ 1]  127 	ld	a, (0x07, sp)
      00004F 88               [ 1]  128 	push	a
      000050 CDr01rAE         [ 4]  129 	call	_ADC1_ExternalTriggerConfig
      000053 5B 02            [ 2]  130 	addw	sp, #2
                                    131 ;	stm8s_adc1.c: 115: ADC1_SchmittTriggerConfig(ADC1_SchmittTriggerChannel, ADC1_SchmittTriggerState);
      000055 7B 0A            [ 1]  132 	ld	a, (0x0a, sp)
      000057 88               [ 1]  133 	push	a
      000058 7B 0A            [ 1]  134 	ld	a, (0x0a, sp)
      00005A 88               [ 1]  135 	push	a
      00005B CDr00rD6         [ 4]  136 	call	_ADC1_SchmittTriggerConfig
      00005E 5B 02            [ 2]  137 	addw	sp, #2
                                    138 ;	stm8s_adc1.c: 118: ADC1->CR1 |= ADC1_CR1_ADON;
      000060 72 10 54 01      [ 1]  139 	bset	0x5401, #0
      000064 81               [ 4]  140 	ret
                                    141 ;	stm8s_adc1.c: 126: void ADC1_Cmd(FunctionalState NewState)
                                    142 ;	-----------------------------------------
                                    143 ;	 function ADC1_Cmd
                                    144 ;	-----------------------------------------
      000065                        145 _ADC1_Cmd:
                                    146 ;	stm8s_adc1.c: 131: if (NewState != DISABLE)
      000065 0D 03            [ 1]  147 	tnz	(0x03, sp)
      000067 27 09            [ 1]  148 	jreq	00102$
                                    149 ;	stm8s_adc1.c: 133: ADC1->CR1 |= ADC1_CR1_ADON;
      000069 AE 54 01         [ 2]  150 	ldw	x, #0x5401
      00006C F6               [ 1]  151 	ld	a, (x)
      00006D AA 01            [ 1]  152 	or	a, #0x01
      00006F F7               [ 1]  153 	ld	(x), a
      000070 20 04            [ 2]  154 	jra	00104$
      000072                        155 00102$:
                                    156 ;	stm8s_adc1.c: 137: ADC1->CR1 &= (uint8_t)(~ADC1_CR1_ADON);
      000072 72 11 54 01      [ 1]  157 	bres	0x5401, #0
      000076                        158 00104$:
      000076 81               [ 4]  159 	ret
                                    160 ;	stm8s_adc1.c: 146: void ADC1_ScanModeCmd(FunctionalState NewState)
                                    161 ;	-----------------------------------------
                                    162 ;	 function ADC1_ScanModeCmd
                                    163 ;	-----------------------------------------
      000077                        164 _ADC1_ScanModeCmd:
                                    165 ;	stm8s_adc1.c: 151: if (NewState != DISABLE)
      000077 0D 03            [ 1]  166 	tnz	(0x03, sp)
      000079 27 09            [ 1]  167 	jreq	00102$
                                    168 ;	stm8s_adc1.c: 153: ADC1->CR2 |= ADC1_CR2_SCAN;
      00007B AE 54 02         [ 2]  169 	ldw	x, #0x5402
      00007E F6               [ 1]  170 	ld	a, (x)
      00007F AA 02            [ 1]  171 	or	a, #0x02
      000081 F7               [ 1]  172 	ld	(x), a
      000082 20 07            [ 2]  173 	jra	00104$
      000084                        174 00102$:
                                    175 ;	stm8s_adc1.c: 157: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_SCAN);
      000084 AE 54 02         [ 2]  176 	ldw	x, #0x5402
      000087 F6               [ 1]  177 	ld	a, (x)
      000088 A4 FD            [ 1]  178 	and	a, #0xfd
      00008A F7               [ 1]  179 	ld	(x), a
      00008B                        180 00104$:
      00008B 81               [ 4]  181 	ret
                                    182 ;	stm8s_adc1.c: 166: void ADC1_DataBufferCmd(FunctionalState NewState)
                                    183 ;	-----------------------------------------
                                    184 ;	 function ADC1_DataBufferCmd
                                    185 ;	-----------------------------------------
      00008C                        186 _ADC1_DataBufferCmd:
                                    187 ;	stm8s_adc1.c: 171: if (NewState != DISABLE)
      00008C 0D 03            [ 1]  188 	tnz	(0x03, sp)
      00008E 27 09            [ 1]  189 	jreq	00102$
                                    190 ;	stm8s_adc1.c: 173: ADC1->CR3 |= ADC1_CR3_DBUF;
      000090 AE 54 03         [ 2]  191 	ldw	x, #0x5403
      000093 F6               [ 1]  192 	ld	a, (x)
      000094 AA 80            [ 1]  193 	or	a, #0x80
      000096 F7               [ 1]  194 	ld	(x), a
      000097 20 04            [ 2]  195 	jra	00104$
      000099                        196 00102$:
                                    197 ;	stm8s_adc1.c: 177: ADC1->CR3 &= (uint8_t)(~ADC1_CR3_DBUF);
      000099 72 17 54 03      [ 1]  198 	bres	0x5403, #7
      00009D                        199 00104$:
      00009D 81               [ 4]  200 	ret
                                    201 ;	stm8s_adc1.c: 190: void ADC1_ITConfig(ADC1_IT_TypeDef ADC1_IT, FunctionalState NewState)
                                    202 ;	-----------------------------------------
                                    203 ;	 function ADC1_ITConfig
                                    204 ;	-----------------------------------------
      00009E                        205 _ADC1_ITConfig:
      00009E 88               [ 1]  206 	push	a
                                    207 ;	stm8s_adc1.c: 196: if (NewState != DISABLE)
      00009F 0D 06            [ 1]  208 	tnz	(0x06, sp)
      0000A1 27 10            [ 1]  209 	jreq	00102$
                                    210 ;	stm8s_adc1.c: 199: ADC1->CSR |= (uint8_t)ADC1_IT;
      0000A3 AE 54 00         [ 2]  211 	ldw	x, #0x5400
      0000A6 F6               [ 1]  212 	ld	a, (x)
      0000A7 6B 01            [ 1]  213 	ld	(0x01, sp), a
      0000A9 7B 05            [ 1]  214 	ld	a, (0x05, sp)
      0000AB 1A 01            [ 1]  215 	or	a, (0x01, sp)
      0000AD AE 54 00         [ 2]  216 	ldw	x, #0x5400
      0000B0 F7               [ 1]  217 	ld	(x), a
      0000B1 20 0F            [ 2]  218 	jra	00104$
      0000B3                        219 00102$:
                                    220 ;	stm8s_adc1.c: 204: ADC1->CSR &= (uint8_t)((uint16_t)~(uint16_t)ADC1_IT);
      0000B3 AE 54 00         [ 2]  221 	ldw	x, #0x5400
      0000B6 F6               [ 1]  222 	ld	a, (x)
      0000B7 1E 04            [ 2]  223 	ldw	x, (0x04, sp)
      0000B9 53               [ 2]  224 	cplw	x
      0000BA 89               [ 2]  225 	pushw	x
      0000BB 14 02            [ 1]  226 	and	a, (2, sp)
      0000BD 85               [ 2]  227 	popw	x
      0000BE AE 54 00         [ 2]  228 	ldw	x, #0x5400
      0000C1 F7               [ 1]  229 	ld	(x), a
      0000C2                        230 00104$:
      0000C2 84               [ 1]  231 	pop	a
      0000C3 81               [ 4]  232 	ret
                                    233 ;	stm8s_adc1.c: 214: void ADC1_PrescalerConfig(ADC1_PresSel_TypeDef ADC1_Prescaler)
                                    234 ;	-----------------------------------------
                                    235 ;	 function ADC1_PrescalerConfig
                                    236 ;	-----------------------------------------
      0000C4                        237 _ADC1_PrescalerConfig:
                                    238 ;	stm8s_adc1.c: 220: ADC1->CR1 &= (uint8_t)(~ADC1_CR1_SPSEL);
      0000C4 AE 54 01         [ 2]  239 	ldw	x, #0x5401
      0000C7 F6               [ 1]  240 	ld	a, (x)
      0000C8 A4 8F            [ 1]  241 	and	a, #0x8f
      0000CA F7               [ 1]  242 	ld	(x), a
                                    243 ;	stm8s_adc1.c: 222: ADC1->CR1 |= (uint8_t)(ADC1_Prescaler);
      0000CB AE 54 01         [ 2]  244 	ldw	x, #0x5401
      0000CE F6               [ 1]  245 	ld	a, (x)
      0000CF 1A 03            [ 1]  246 	or	a, (0x03, sp)
      0000D1 AE 54 01         [ 2]  247 	ldw	x, #0x5401
      0000D4 F7               [ 1]  248 	ld	(x), a
      0000D5 81               [ 4]  249 	ret
                                    250 ;	stm8s_adc1.c: 233: void ADC1_SchmittTriggerConfig(ADC1_SchmittTrigg_TypeDef ADC1_SchmittTriggerChannel, FunctionalState NewState)
                                    251 ;	-----------------------------------------
                                    252 ;	 function ADC1_SchmittTriggerConfig
                                    253 ;	-----------------------------------------
      0000D6                        254 _ADC1_SchmittTriggerConfig:
      0000D6 52 04            [ 2]  255 	sub	sp, #4
                                    256 ;	stm8s_adc1.c: 239: if (ADC1_SchmittTriggerChannel == ADC1_SCHMITTTRIG_ALL)
      0000D8 7B 07            [ 1]  257 	ld	a, (0x07, sp)
      0000DA A1 FF            [ 1]  258 	cp	a, #0xff
      0000DC 26 2E            [ 1]  259 	jrne	00114$
                                    260 ;	stm8s_adc1.c: 241: if (NewState != DISABLE)
      0000DE 0D 08            [ 1]  261 	tnz	(0x08, sp)
      0000E0 27 13            [ 1]  262 	jreq	00102$
                                    263 ;	stm8s_adc1.c: 243: ADC1->TDRL &= (uint8_t)0x0;
      0000E2 AE 54 07         [ 2]  264 	ldw	x, #0x5407
      0000E5 F6               [ 1]  265 	ld	a, (x)
      0000E6 AE 54 07         [ 2]  266 	ldw	x, #0x5407
      0000E9 7F               [ 1]  267 	clr	(x)
                                    268 ;	stm8s_adc1.c: 244: ADC1->TDRH &= (uint8_t)0x0;
      0000EA AE 54 06         [ 2]  269 	ldw	x, #0x5406
      0000ED F6               [ 1]  270 	ld	a, (x)
      0000EE AE 54 06         [ 2]  271 	ldw	x, #0x5406
      0000F1 7F               [ 1]  272 	clr	(x)
      0000F2 CCr01r72         [ 2]  273 	jp	00116$
      0000F5                        274 00102$:
                                    275 ;	stm8s_adc1.c: 248: ADC1->TDRL |= (uint8_t)0xFF;
      0000F5 AE 54 07         [ 2]  276 	ldw	x, #0x5407
      0000F8 F6               [ 1]  277 	ld	a, (x)
      0000F9 AE 54 07         [ 2]  278 	ldw	x, #0x5407
      0000FC A6 FF            [ 1]  279 	ld	a, #0xff
      0000FE F7               [ 1]  280 	ld	(x), a
                                    281 ;	stm8s_adc1.c: 249: ADC1->TDRH |= (uint8_t)0xFF;
      0000FF AE 54 06         [ 2]  282 	ldw	x, #0x5406
      000102 F6               [ 1]  283 	ld	a, (x)
      000103 AE 54 06         [ 2]  284 	ldw	x, #0x5406
      000106 A6 FF            [ 1]  285 	ld	a, #0xff
      000108 F7               [ 1]  286 	ld	(x), a
      000109 CCr01r72         [ 2]  287 	jp	00116$
      00010C                        288 00114$:
                                    289 ;	stm8s_adc1.c: 252: else if (ADC1_SchmittTriggerChannel < ADC1_SCHMITTTRIG_CHANNEL8)
      00010C 7B 07            [ 1]  290 	ld	a, (0x07, sp)
      00010E A1 08            [ 1]  291 	cp	a, #0x08
      000110 24 2F            [ 1]  292 	jrnc	00111$
                                    293 ;	stm8s_adc1.c: 256: ADC1->TDRL &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel));
      000112 A6 01            [ 1]  294 	ld	a, #0x01
      000114 6B 04            [ 1]  295 	ld	(0x04, sp), a
      000116 7B 07            [ 1]  296 	ld	a, (0x07, sp)
      000118 4D               [ 1]  297 	tnz	a
      000119 27 05            [ 1]  298 	jreq	00144$
      00011B                        299 00143$:
      00011B 08 04            [ 1]  300 	sll	(0x04, sp)
      00011D 4A               [ 1]  301 	dec	a
      00011E 26 FB            [ 1]  302 	jrne	00143$
      000120                        303 00144$:
                                    304 ;	stm8s_adc1.c: 254: if (NewState != DISABLE)
      000120 0D 08            [ 1]  305 	tnz	(0x08, sp)
      000122 27 11            [ 1]  306 	jreq	00105$
                                    307 ;	stm8s_adc1.c: 256: ADC1->TDRL &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel));
      000124 AE 54 07         [ 2]  308 	ldw	x, #0x5407
      000127 F6               [ 1]  309 	ld	a, (x)
      000128 6B 03            [ 1]  310 	ld	(0x03, sp), a
      00012A 7B 04            [ 1]  311 	ld	a, (0x04, sp)
      00012C 43               [ 1]  312 	cpl	a
      00012D 14 03            [ 1]  313 	and	a, (0x03, sp)
      00012F AE 54 07         [ 2]  314 	ldw	x, #0x5407
      000132 F7               [ 1]  315 	ld	(x), a
      000133 20 3D            [ 2]  316 	jra	00116$
      000135                        317 00105$:
                                    318 ;	stm8s_adc1.c: 260: ADC1->TDRL |= (uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel);
      000135 AE 54 07         [ 2]  319 	ldw	x, #0x5407
      000138 F6               [ 1]  320 	ld	a, (x)
      000139 1A 04            [ 1]  321 	or	a, (0x04, sp)
      00013B AE 54 07         [ 2]  322 	ldw	x, #0x5407
      00013E F7               [ 1]  323 	ld	(x), a
      00013F 20 31            [ 2]  324 	jra	00116$
      000141                        325 00111$:
                                    326 ;	stm8s_adc1.c: 267: ADC1->TDRH &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8)));
      000141 7B 07            [ 1]  327 	ld	a, (0x07, sp)
      000143 A0 08            [ 1]  328 	sub	a, #0x08
      000145 95               [ 1]  329 	ld	xh, a
      000146 A6 01            [ 1]  330 	ld	a, #0x01
      000148 6B 02            [ 1]  331 	ld	(0x02, sp), a
      00014A 9E               [ 1]  332 	ld	a, xh
      00014B 4D               [ 1]  333 	tnz	a
      00014C 27 05            [ 1]  334 	jreq	00147$
      00014E                        335 00146$:
      00014E 08 02            [ 1]  336 	sll	(0x02, sp)
      000150 4A               [ 1]  337 	dec	a
      000151 26 FB            [ 1]  338 	jrne	00146$
      000153                        339 00147$:
                                    340 ;	stm8s_adc1.c: 265: if (NewState != DISABLE)
      000153 0D 08            [ 1]  341 	tnz	(0x08, sp)
      000155 27 11            [ 1]  342 	jreq	00108$
                                    343 ;	stm8s_adc1.c: 267: ADC1->TDRH &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8)));
      000157 AE 54 06         [ 2]  344 	ldw	x, #0x5406
      00015A F6               [ 1]  345 	ld	a, (x)
      00015B 6B 01            [ 1]  346 	ld	(0x01, sp), a
      00015D 7B 02            [ 1]  347 	ld	a, (0x02, sp)
      00015F 43               [ 1]  348 	cpl	a
      000160 14 01            [ 1]  349 	and	a, (0x01, sp)
      000162 AE 54 06         [ 2]  350 	ldw	x, #0x5406
      000165 F7               [ 1]  351 	ld	(x), a
      000166 20 0A            [ 2]  352 	jra	00116$
      000168                        353 00108$:
                                    354 ;	stm8s_adc1.c: 271: ADC1->TDRH |= (uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8));
      000168 AE 54 06         [ 2]  355 	ldw	x, #0x5406
      00016B F6               [ 1]  356 	ld	a, (x)
      00016C 1A 02            [ 1]  357 	or	a, (0x02, sp)
      00016E AE 54 06         [ 2]  358 	ldw	x, #0x5406
      000171 F7               [ 1]  359 	ld	(x), a
      000172                        360 00116$:
      000172 5B 04            [ 2]  361 	addw	sp, #4
      000174 81               [ 4]  362 	ret
                                    363 ;	stm8s_adc1.c: 286: void ADC1_ConversionConfig(ADC1_ConvMode_TypeDef ADC1_ConversionMode, ADC1_Channel_TypeDef ADC1_Channel, ADC1_Align_TypeDef ADC1_Align)
                                    364 ;	-----------------------------------------
                                    365 ;	 function ADC1_ConversionConfig
                                    366 ;	-----------------------------------------
      000175                        367 _ADC1_ConversionConfig:
                                    368 ;	stm8s_adc1.c: 294: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_ALIGN);
      000175 AE 54 02         [ 2]  369 	ldw	x, #0x5402
      000178 F6               [ 1]  370 	ld	a, (x)
      000179 A4 F7            [ 1]  371 	and	a, #0xf7
      00017B F7               [ 1]  372 	ld	(x), a
                                    373 ;	stm8s_adc1.c: 296: ADC1->CR2 |= (uint8_t)(ADC1_Align);
      00017C AE 54 02         [ 2]  374 	ldw	x, #0x5402
      00017F F6               [ 1]  375 	ld	a, (x)
      000180 1A 05            [ 1]  376 	or	a, (0x05, sp)
      000182 AE 54 02         [ 2]  377 	ldw	x, #0x5402
      000185 F7               [ 1]  378 	ld	(x), a
                                    379 ;	stm8s_adc1.c: 298: if (ADC1_ConversionMode == ADC1_CONVERSIONMODE_CONTINUOUS)
      000186 7B 03            [ 1]  380 	ld	a, (0x03, sp)
      000188 A1 01            [ 1]  381 	cp	a, #0x01
      00018A 26 09            [ 1]  382 	jrne	00102$
                                    383 ;	stm8s_adc1.c: 301: ADC1->CR1 |= ADC1_CR1_CONT;
      00018C AE 54 01         [ 2]  384 	ldw	x, #0x5401
      00018F F6               [ 1]  385 	ld	a, (x)
      000190 AA 02            [ 1]  386 	or	a, #0x02
      000192 F7               [ 1]  387 	ld	(x), a
      000193 20 07            [ 2]  388 	jra	00103$
      000195                        389 00102$:
                                    390 ;	stm8s_adc1.c: 306: ADC1->CR1 &= (uint8_t)(~ADC1_CR1_CONT);
      000195 AE 54 01         [ 2]  391 	ldw	x, #0x5401
      000198 F6               [ 1]  392 	ld	a, (x)
      000199 A4 FD            [ 1]  393 	and	a, #0xfd
      00019B F7               [ 1]  394 	ld	(x), a
      00019C                        395 00103$:
                                    396 ;	stm8s_adc1.c: 310: ADC1->CSR &= (uint8_t)(~ADC1_CSR_CH);
      00019C AE 54 00         [ 2]  397 	ldw	x, #0x5400
      00019F F6               [ 1]  398 	ld	a, (x)
      0001A0 A4 F0            [ 1]  399 	and	a, #0xf0
      0001A2 F7               [ 1]  400 	ld	(x), a
                                    401 ;	stm8s_adc1.c: 312: ADC1->CSR |= (uint8_t)(ADC1_Channel);
      0001A3 AE 54 00         [ 2]  402 	ldw	x, #0x5400
      0001A6 F6               [ 1]  403 	ld	a, (x)
      0001A7 1A 04            [ 1]  404 	or	a, (0x04, sp)
      0001A9 AE 54 00         [ 2]  405 	ldw	x, #0x5400
      0001AC F7               [ 1]  406 	ld	(x), a
      0001AD 81               [ 4]  407 	ret
                                    408 ;	stm8s_adc1.c: 325: void ADC1_ExternalTriggerConfig(ADC1_ExtTrig_TypeDef ADC1_ExtTrigger, FunctionalState NewState)
                                    409 ;	-----------------------------------------
                                    410 ;	 function ADC1_ExternalTriggerConfig
                                    411 ;	-----------------------------------------
      0001AE                        412 _ADC1_ExternalTriggerConfig:
                                    413 ;	stm8s_adc1.c: 332: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_EXTSEL);
      0001AE AE 54 02         [ 2]  414 	ldw	x, #0x5402
      0001B1 F6               [ 1]  415 	ld	a, (x)
      0001B2 A4 CF            [ 1]  416 	and	a, #0xcf
      0001B4 F7               [ 1]  417 	ld	(x), a
                                    418 ;	stm8s_adc1.c: 334: if (NewState != DISABLE)
      0001B5 0D 04            [ 1]  419 	tnz	(0x04, sp)
      0001B7 27 09            [ 1]  420 	jreq	00102$
                                    421 ;	stm8s_adc1.c: 337: ADC1->CR2 |= (uint8_t)(ADC1_CR2_EXTTRIG);
      0001B9 AE 54 02         [ 2]  422 	ldw	x, #0x5402
      0001BC F6               [ 1]  423 	ld	a, (x)
      0001BD AA 40            [ 1]  424 	or	a, #0x40
      0001BF F7               [ 1]  425 	ld	(x), a
      0001C0 20 07            [ 2]  426 	jra	00103$
      0001C2                        427 00102$:
                                    428 ;	stm8s_adc1.c: 342: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_EXTTRIG);
      0001C2 AE 54 02         [ 2]  429 	ldw	x, #0x5402
      0001C5 F6               [ 1]  430 	ld	a, (x)
      0001C6 A4 BF            [ 1]  431 	and	a, #0xbf
      0001C8 F7               [ 1]  432 	ld	(x), a
      0001C9                        433 00103$:
                                    434 ;	stm8s_adc1.c: 346: ADC1->CR2 |= (uint8_t)(ADC1_ExtTrigger);
      0001C9 AE 54 02         [ 2]  435 	ldw	x, #0x5402
      0001CC F6               [ 1]  436 	ld	a, (x)
      0001CD 1A 03            [ 1]  437 	or	a, (0x03, sp)
      0001CF AE 54 02         [ 2]  438 	ldw	x, #0x5402
      0001D2 F7               [ 1]  439 	ld	(x), a
      0001D3 81               [ 4]  440 	ret
                                    441 ;	stm8s_adc1.c: 358: void ADC1_StartConversion(void)
                                    442 ;	-----------------------------------------
                                    443 ;	 function ADC1_StartConversion
                                    444 ;	-----------------------------------------
      0001D4                        445 _ADC1_StartConversion:
                                    446 ;	stm8s_adc1.c: 360: ADC1->CR1 |= ADC1_CR1_ADON;
      0001D4 72 10 54 01      [ 1]  447 	bset	0x5401, #0
      0001D8 81               [ 4]  448 	ret
                                    449 ;	stm8s_adc1.c: 370: uint16_t ADC1_GetConversionValue(void)
                                    450 ;	-----------------------------------------
                                    451 ;	 function ADC1_GetConversionValue
                                    452 ;	-----------------------------------------
      0001D9                        453 _ADC1_GetConversionValue:
      0001D9 52 0B            [ 2]  454 	sub	sp, #11
                                    455 ;	stm8s_adc1.c: 375: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      0001DB AE 54 02         [ 2]  456 	ldw	x, #0x5402
      0001DE F6               [ 1]  457 	ld	a, (x)
      0001DF A5 08            [ 1]  458 	bcp	a, #0x08
      0001E1 27 2A            [ 1]  459 	jreq	00102$
                                    460 ;	stm8s_adc1.c: 378: templ = ADC1->DRL;
      0001E3 AE 54 05         [ 2]  461 	ldw	x, #0x5405
      0001E6 F6               [ 1]  462 	ld	a, (x)
      0001E7 6B 0B            [ 1]  463 	ld	(0x0b, sp), a
                                    464 ;	stm8s_adc1.c: 380: temph = ADC1->DRH;
      0001E9 AE 54 04         [ 2]  465 	ldw	x, #0x5404
      0001EC F6               [ 1]  466 	ld	a, (x)
      0001ED 5F               [ 1]  467 	clrw	x
      0001EE 97               [ 1]  468 	ld	xl, a
                                    469 ;	stm8s_adc1.c: 382: temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
      0001EF 58               [ 2]  470 	sllw	x
      0001F0 58               [ 2]  471 	sllw	x
      0001F1 58               [ 2]  472 	sllw	x
      0001F2 58               [ 2]  473 	sllw	x
      0001F3 58               [ 2]  474 	sllw	x
      0001F4 58               [ 2]  475 	sllw	x
      0001F5 58               [ 2]  476 	sllw	x
      0001F6 58               [ 2]  477 	sllw	x
      0001F7 7B 0B            [ 1]  478 	ld	a, (0x0b, sp)
      0001F9 6B 0A            [ 1]  479 	ld	(0x0a, sp), a
      0001FB 0F 09            [ 1]  480 	clr	(0x09, sp)
      0001FD 9F               [ 1]  481 	ld	a, xl
      0001FE 1A 0A            [ 1]  482 	or	a, (0x0a, sp)
      000200 6B 08            [ 1]  483 	ld	(0x08, sp), a
      000202 9E               [ 1]  484 	ld	a, xh
      000203 1A 09            [ 1]  485 	or	a, (0x09, sp)
      000205 88               [ 1]  486 	push	a
      000206 7B 09            [ 1]  487 	ld	a, (0x09, sp)
      000208 6B 07            [ 1]  488 	ld	(0x07, sp), a
      00020A 84               [ 1]  489 	pop	a
      00020B 20 2D            [ 2]  490 	jra	00103$
      00020D                        491 00102$:
                                    492 ;	stm8s_adc1.c: 387: temph = ADC1->DRH;
      00020D AE 54 04         [ 2]  493 	ldw	x, #0x5404
      000210 F6               [ 1]  494 	ld	a, (x)
      000211 90 5F            [ 1]  495 	clrw	y
      000213 90 97            [ 1]  496 	ld	yl, a
                                    497 ;	stm8s_adc1.c: 389: templ = ADC1->DRL;
      000215 AE 54 05         [ 2]  498 	ldw	x, #0x5405
      000218 F6               [ 1]  499 	ld	a, (x)
                                    500 ;	stm8s_adc1.c: 391: temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)((uint16_t)temph << 8));
      000219 5F               [ 1]  501 	clrw	x
      00021A 97               [ 1]  502 	ld	xl, a
      00021B 58               [ 2]  503 	sllw	x
      00021C 58               [ 2]  504 	sllw	x
      00021D 58               [ 2]  505 	sllw	x
      00021E 58               [ 2]  506 	sllw	x
      00021F 58               [ 2]  507 	sllw	x
      000220 58               [ 2]  508 	sllw	x
      000221 1F 03            [ 2]  509 	ldw	(0x03, sp), x
      000223 93               [ 1]  510 	ldw	x, y
      000224 58               [ 2]  511 	sllw	x
      000225 58               [ 2]  512 	sllw	x
      000226 58               [ 2]  513 	sllw	x
      000227 58               [ 2]  514 	sllw	x
      000228 58               [ 2]  515 	sllw	x
      000229 58               [ 2]  516 	sllw	x
      00022A 58               [ 2]  517 	sllw	x
      00022B 58               [ 2]  518 	sllw	x
      00022C 9F               [ 1]  519 	ld	a, xl
      00022D 1A 04            [ 1]  520 	or	a, (0x04, sp)
      00022F 6B 02            [ 1]  521 	ld	(0x02, sp), a
      000231 9E               [ 1]  522 	ld	a, xh
      000232 1A 03            [ 1]  523 	or	a, (0x03, sp)
      000234 88               [ 1]  524 	push	a
      000235 7B 03            [ 1]  525 	ld	a, (0x03, sp)
      000237 6B 07            [ 1]  526 	ld	(0x07, sp), a
      000239 84               [ 1]  527 	pop	a
      00023A                        528 00103$:
                                    529 ;	stm8s_adc1.c: 394: return ((uint16_t)temph);
      00023A 95               [ 1]  530 	ld	xh, a
      00023B 7B 06            [ 1]  531 	ld	a, (0x06, sp)
      00023D 97               [ 1]  532 	ld	xl, a
      00023E 5B 0B            [ 2]  533 	addw	sp, #11
      000240 81               [ 4]  534 	ret
                                    535 ;	stm8s_adc1.c: 405: void ADC1_AWDChannelConfig(ADC1_Channel_TypeDef Channel, FunctionalState NewState)
                                    536 ;	-----------------------------------------
                                    537 ;	 function ADC1_AWDChannelConfig
                                    538 ;	-----------------------------------------
      000241                        539 _ADC1_AWDChannelConfig:
      000241 52 04            [ 2]  540 	sub	sp, #4
                                    541 ;	stm8s_adc1.c: 411: if (Channel < (uint8_t)8)
      000243 7B 07            [ 1]  542 	ld	a, (0x07, sp)
      000245 A1 08            [ 1]  543 	cp	a, #0x08
      000247 24 2F            [ 1]  544 	jrnc	00108$
                                    545 ;	stm8s_adc1.c: 415: ADC1->AWCRL |= (uint8_t)((uint8_t)1 << Channel);
      000249 A6 01            [ 1]  546 	ld	a, #0x01
      00024B 6B 04            [ 1]  547 	ld	(0x04, sp), a
      00024D 7B 07            [ 1]  548 	ld	a, (0x07, sp)
      00024F 4D               [ 1]  549 	tnz	a
      000250 27 05            [ 1]  550 	jreq	00126$
      000252                        551 00125$:
      000252 08 04            [ 1]  552 	sll	(0x04, sp)
      000254 4A               [ 1]  553 	dec	a
      000255 26 FB            [ 1]  554 	jrne	00125$
      000257                        555 00126$:
                                    556 ;	stm8s_adc1.c: 413: if (NewState != DISABLE)
      000257 0D 08            [ 1]  557 	tnz	(0x08, sp)
      000259 27 0C            [ 1]  558 	jreq	00102$
                                    559 ;	stm8s_adc1.c: 415: ADC1->AWCRL |= (uint8_t)((uint8_t)1 << Channel);
      00025B AE 54 0F         [ 2]  560 	ldw	x, #0x540f
      00025E F6               [ 1]  561 	ld	a, (x)
      00025F 1A 04            [ 1]  562 	or	a, (0x04, sp)
      000261 AE 54 0F         [ 2]  563 	ldw	x, #0x540f
      000264 F7               [ 1]  564 	ld	(x), a
      000265 20 42            [ 2]  565 	jra	00110$
      000267                        566 00102$:
                                    567 ;	stm8s_adc1.c: 419: ADC1->AWCRL &= (uint8_t)~(uint8_t)((uint8_t)1 << Channel);
      000267 AE 54 0F         [ 2]  568 	ldw	x, #0x540f
      00026A F6               [ 1]  569 	ld	a, (x)
      00026B 6B 03            [ 1]  570 	ld	(0x03, sp), a
      00026D 7B 04            [ 1]  571 	ld	a, (0x04, sp)
      00026F 43               [ 1]  572 	cpl	a
      000270 14 03            [ 1]  573 	and	a, (0x03, sp)
      000272 AE 54 0F         [ 2]  574 	ldw	x, #0x540f
      000275 F7               [ 1]  575 	ld	(x), a
      000276 20 31            [ 2]  576 	jra	00110$
      000278                        577 00108$:
                                    578 ;	stm8s_adc1.c: 426: ADC1->AWCRH |= (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8));
      000278 7B 07            [ 1]  579 	ld	a, (0x07, sp)
      00027A A0 08            [ 1]  580 	sub	a, #0x08
      00027C 95               [ 1]  581 	ld	xh, a
      00027D A6 01            [ 1]  582 	ld	a, #0x01
      00027F 6B 02            [ 1]  583 	ld	(0x02, sp), a
      000281 9E               [ 1]  584 	ld	a, xh
      000282 4D               [ 1]  585 	tnz	a
      000283 27 05            [ 1]  586 	jreq	00129$
      000285                        587 00128$:
      000285 08 02            [ 1]  588 	sll	(0x02, sp)
      000287 4A               [ 1]  589 	dec	a
      000288 26 FB            [ 1]  590 	jrne	00128$
      00028A                        591 00129$:
                                    592 ;	stm8s_adc1.c: 424: if (NewState != DISABLE)
      00028A 0D 08            [ 1]  593 	tnz	(0x08, sp)
      00028C 27 0C            [ 1]  594 	jreq	00105$
                                    595 ;	stm8s_adc1.c: 426: ADC1->AWCRH |= (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8));
      00028E AE 54 0E         [ 2]  596 	ldw	x, #0x540e
      000291 F6               [ 1]  597 	ld	a, (x)
      000292 1A 02            [ 1]  598 	or	a, (0x02, sp)
      000294 AE 54 0E         [ 2]  599 	ldw	x, #0x540e
      000297 F7               [ 1]  600 	ld	(x), a
      000298 20 0F            [ 2]  601 	jra	00110$
      00029A                        602 00105$:
                                    603 ;	stm8s_adc1.c: 430: ADC1->AWCRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (uint8_t)(Channel - (uint8_t)8));
      00029A AE 54 0E         [ 2]  604 	ldw	x, #0x540e
      00029D F6               [ 1]  605 	ld	a, (x)
      00029E 6B 01            [ 1]  606 	ld	(0x01, sp), a
      0002A0 7B 02            [ 1]  607 	ld	a, (0x02, sp)
      0002A2 43               [ 1]  608 	cpl	a
      0002A3 14 01            [ 1]  609 	and	a, (0x01, sp)
      0002A5 AE 54 0E         [ 2]  610 	ldw	x, #0x540e
      0002A8 F7               [ 1]  611 	ld	(x), a
      0002A9                        612 00110$:
      0002A9 5B 04            [ 2]  613 	addw	sp, #4
      0002AB 81               [ 4]  614 	ret
                                    615 ;	stm8s_adc1.c: 441: void ADC1_SetHighThreshold(uint16_t Threshold)
                                    616 ;	-----------------------------------------
                                    617 ;	 function ADC1_SetHighThreshold
                                    618 ;	-----------------------------------------
      0002AC                        619 _ADC1_SetHighThreshold:
                                    620 ;	stm8s_adc1.c: 443: ADC1->HTRH = (uint8_t)(Threshold >> (uint8_t)2);
      0002AC 1E 03            [ 2]  621 	ldw	x, (0x03, sp)
      0002AE 54               [ 2]  622 	srlw	x
      0002AF 54               [ 2]  623 	srlw	x
      0002B0 9F               [ 1]  624 	ld	a, xl
      0002B1 AE 54 08         [ 2]  625 	ldw	x, #0x5408
      0002B4 F7               [ 1]  626 	ld	(x), a
                                    627 ;	stm8s_adc1.c: 444: ADC1->HTRL = (uint8_t)Threshold;
      0002B5 7B 04            [ 1]  628 	ld	a, (0x04, sp)
      0002B7 AE 54 09         [ 2]  629 	ldw	x, #0x5409
      0002BA F7               [ 1]  630 	ld	(x), a
      0002BB 81               [ 4]  631 	ret
                                    632 ;	stm8s_adc1.c: 453: void ADC1_SetLowThreshold(uint16_t Threshold)
                                    633 ;	-----------------------------------------
                                    634 ;	 function ADC1_SetLowThreshold
                                    635 ;	-----------------------------------------
      0002BC                        636 _ADC1_SetLowThreshold:
                                    637 ;	stm8s_adc1.c: 455: ADC1->LTRL = (uint8_t)Threshold;
      0002BC 7B 04            [ 1]  638 	ld	a, (0x04, sp)
      0002BE AE 54 0B         [ 2]  639 	ldw	x, #0x540b
      0002C1 F7               [ 1]  640 	ld	(x), a
                                    641 ;	stm8s_adc1.c: 456: ADC1->LTRH = (uint8_t)(Threshold >> (uint8_t)2);
      0002C2 1E 03            [ 2]  642 	ldw	x, (0x03, sp)
      0002C4 54               [ 2]  643 	srlw	x
      0002C5 54               [ 2]  644 	srlw	x
      0002C6 9F               [ 1]  645 	ld	a, xl
      0002C7 AE 54 0A         [ 2]  646 	ldw	x, #0x540a
      0002CA F7               [ 1]  647 	ld	(x), a
      0002CB 81               [ 4]  648 	ret
                                    649 ;	stm8s_adc1.c: 466: uint16_t ADC1_GetBufferValue(uint8_t Buffer)
                                    650 ;	-----------------------------------------
                                    651 ;	 function ADC1_GetBufferValue
                                    652 ;	-----------------------------------------
      0002CC                        653 _ADC1_GetBufferValue:
      0002CC 52 0D            [ 2]  654 	sub	sp, #13
                                    655 ;	stm8s_adc1.c: 474: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      0002CE AE 54 02         [ 2]  656 	ldw	x, #0x5402
      0002D1 F6               [ 1]  657 	ld	a, (x)
      0002D2 6B 0D            [ 1]  658 	ld	(0x0d, sp), a
                                    659 ;	stm8s_adc1.c: 477: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      0002D4 7B 10            [ 1]  660 	ld	a, (0x10, sp)
      0002D6 48               [ 1]  661 	sll	a
      0002D7 5F               [ 1]  662 	clrw	x
      0002D8 97               [ 1]  663 	ld	xl, a
      0002D9 90 93            [ 1]  664 	ldw	y, x
      0002DB 72 A9 53 E1      [ 2]  665 	addw	y, #0x53e1
                                    666 ;	stm8s_adc1.c: 479: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      0002DF 1C 53 E0         [ 2]  667 	addw	x, #0x53e0
                                    668 ;	stm8s_adc1.c: 477: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
                                    669 ;	stm8s_adc1.c: 479: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
                                    670 ;	stm8s_adc1.c: 477: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      0002E2 90 F6            [ 1]  671 	ld	a, (y)
      0002E4 6B 0C            [ 1]  672 	ld	(0x0c, sp), a
                                    673 ;	stm8s_adc1.c: 479: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      0002E6 F6               [ 1]  674 	ld	a, (x)
      0002E7 5F               [ 1]  675 	clrw	x
      0002E8 97               [ 1]  676 	ld	xl, a
                                    677 ;	stm8s_adc1.c: 474: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      0002E9 7B 0D            [ 1]  678 	ld	a, (0x0d, sp)
      0002EB A5 08            [ 1]  679 	bcp	a, #0x08
      0002ED 27 22            [ 1]  680 	jreq	00102$
                                    681 ;	stm8s_adc1.c: 477: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      0002EF 7B 0C            [ 1]  682 	ld	a, (0x0c, sp)
      0002F1 6B 0B            [ 1]  683 	ld	(0x0b, sp), a
                                    684 ;	stm8s_adc1.c: 479: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
                                    685 ;	stm8s_adc1.c: 481: temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
      0002F3 58               [ 2]  686 	sllw	x
      0002F4 58               [ 2]  687 	sllw	x
      0002F5 58               [ 2]  688 	sllw	x
      0002F6 58               [ 2]  689 	sllw	x
      0002F7 58               [ 2]  690 	sllw	x
      0002F8 58               [ 2]  691 	sllw	x
      0002F9 58               [ 2]  692 	sllw	x
      0002FA 58               [ 2]  693 	sllw	x
      0002FB 7B 0B            [ 1]  694 	ld	a, (0x0b, sp)
      0002FD 6B 0A            [ 1]  695 	ld	(0x0a, sp), a
      0002FF 0F 09            [ 1]  696 	clr	(0x09, sp)
      000301 9F               [ 1]  697 	ld	a, xl
      000302 1A 0A            [ 1]  698 	or	a, (0x0a, sp)
      000304 6B 08            [ 1]  699 	ld	(0x08, sp), a
      000306 9E               [ 1]  700 	ld	a, xh
      000307 1A 09            [ 1]  701 	or	a, (0x09, sp)
      000309 6B 05            [ 1]  702 	ld	(0x05, sp), a
      00030B 7B 08            [ 1]  703 	ld	a, (0x08, sp)
      00030D 6B 06            [ 1]  704 	ld	(0x06, sp), a
      00030F 20 25            [ 2]  705 	jra	00103$
      000311                        706 00102$:
                                    707 ;	stm8s_adc1.c: 486: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      000311 90 93            [ 1]  708 	ldw	y, x
                                    709 ;	stm8s_adc1.c: 488: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      000313 7B 0C            [ 1]  710 	ld	a, (0x0c, sp)
                                    711 ;	stm8s_adc1.c: 490: temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)(temph << 8));
      000315 5F               [ 1]  712 	clrw	x
      000316 97               [ 1]  713 	ld	xl, a
      000317 58               [ 2]  714 	sllw	x
      000318 58               [ 2]  715 	sllw	x
      000319 58               [ 2]  716 	sllw	x
      00031A 58               [ 2]  717 	sllw	x
      00031B 58               [ 2]  718 	sllw	x
      00031C 58               [ 2]  719 	sllw	x
      00031D 1F 03            [ 2]  720 	ldw	(0x03, sp), x
      00031F 93               [ 1]  721 	ldw	x, y
      000320 58               [ 2]  722 	sllw	x
      000321 58               [ 2]  723 	sllw	x
      000322 58               [ 2]  724 	sllw	x
      000323 58               [ 2]  725 	sllw	x
      000324 58               [ 2]  726 	sllw	x
      000325 58               [ 2]  727 	sllw	x
      000326 58               [ 2]  728 	sllw	x
      000327 58               [ 2]  729 	sllw	x
      000328 9F               [ 1]  730 	ld	a, xl
      000329 1A 04            [ 1]  731 	or	a, (0x04, sp)
      00032B 6B 02            [ 1]  732 	ld	(0x02, sp), a
      00032D 9E               [ 1]  733 	ld	a, xh
      00032E 1A 03            [ 1]  734 	or	a, (0x03, sp)
      000330 6B 05            [ 1]  735 	ld	(0x05, sp), a
      000332 7B 02            [ 1]  736 	ld	a, (0x02, sp)
      000334 6B 06            [ 1]  737 	ld	(0x06, sp), a
      000336                        738 00103$:
                                    739 ;	stm8s_adc1.c: 493: return ((uint16_t)temph);
      000336 1E 05            [ 2]  740 	ldw	x, (0x05, sp)
      000338 5B 0D            [ 2]  741 	addw	sp, #13
      00033A 81               [ 4]  742 	ret
                                    743 ;	stm8s_adc1.c: 502: FlagStatus ADC1_GetAWDChannelStatus(ADC1_Channel_TypeDef Channel)
                                    744 ;	-----------------------------------------
                                    745 ;	 function ADC1_GetAWDChannelStatus
                                    746 ;	-----------------------------------------
      00033B                        747 _ADC1_GetAWDChannelStatus:
      00033B 52 02            [ 2]  748 	sub	sp, #2
                                    749 ;	stm8s_adc1.c: 509: if (Channel < (uint8_t)8)
      00033D 7B 05            [ 1]  750 	ld	a, (0x05, sp)
      00033F A1 08            [ 1]  751 	cp	a, #0x08
      000341 24 18            [ 1]  752 	jrnc	00102$
                                    753 ;	stm8s_adc1.c: 511: status = (uint8_t)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << Channel));
      000343 AE 54 0D         [ 2]  754 	ldw	x, #0x540d
      000346 F6               [ 1]  755 	ld	a, (x)
      000347 6B 02            [ 1]  756 	ld	(0x02, sp), a
      000349 A6 01            [ 1]  757 	ld	a, #0x01
      00034B 88               [ 1]  758 	push	a
      00034C 7B 06            [ 1]  759 	ld	a, (0x06, sp)
      00034E 4D               [ 1]  760 	tnz	a
      00034F 27 05            [ 1]  761 	jreq	00112$
      000351                        762 00111$:
      000351 08 01            [ 1]  763 	sll	(1, sp)
      000353 4A               [ 1]  764 	dec	a
      000354 26 FB            [ 1]  765 	jrne	00111$
      000356                        766 00112$:
      000356 84               [ 1]  767 	pop	a
      000357 14 02            [ 1]  768 	and	a, (0x02, sp)
      000359 20 1A            [ 2]  769 	jra	00103$
      00035B                        770 00102$:
                                    771 ;	stm8s_adc1.c: 515: status = (uint8_t)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8)));
      00035B AE 54 0C         [ 2]  772 	ldw	x, #0x540c
      00035E F6               [ 1]  773 	ld	a, (x)
      00035F 6B 01            [ 1]  774 	ld	(0x01, sp), a
      000361 7B 05            [ 1]  775 	ld	a, (0x05, sp)
      000363 A0 08            [ 1]  776 	sub	a, #0x08
      000365 95               [ 1]  777 	ld	xh, a
      000366 A6 01            [ 1]  778 	ld	a, #0x01
      000368 88               [ 1]  779 	push	a
      000369 9E               [ 1]  780 	ld	a, xh
      00036A 4D               [ 1]  781 	tnz	a
      00036B 27 05            [ 1]  782 	jreq	00114$
      00036D                        783 00113$:
      00036D 08 01            [ 1]  784 	sll	(1, sp)
      00036F 4A               [ 1]  785 	dec	a
      000370 26 FB            [ 1]  786 	jrne	00113$
      000372                        787 00114$:
      000372 84               [ 1]  788 	pop	a
      000373 14 01            [ 1]  789 	and	a, (0x01, sp)
      000375                        790 00103$:
                                    791 ;	stm8s_adc1.c: 518: return ((FlagStatus)status);
      000375 5B 02            [ 2]  792 	addw	sp, #2
      000377 81               [ 4]  793 	ret
                                    794 ;	stm8s_adc1.c: 527: FlagStatus ADC1_GetFlagStatus(ADC1_Flag_TypeDef Flag)
                                    795 ;	-----------------------------------------
                                    796 ;	 function ADC1_GetFlagStatus
                                    797 ;	-----------------------------------------
      000378                        798 _ADC1_GetFlagStatus:
      000378 52 04            [ 2]  799 	sub	sp, #4
                                    800 ;	stm8s_adc1.c: 535: if ((Flag & 0x0F) == 0x01)
      00037A 7B 07            [ 1]  801 	ld	a, (0x07, sp)
      00037C A4 0F            [ 1]  802 	and	a, #0x0f
      00037E 6B 04            [ 1]  803 	ld	(0x04, sp), a
      000380 7B 04            [ 1]  804 	ld	a, (0x04, sp)
      000382 A1 01            [ 1]  805 	cp	a, #0x01
      000384 26 08            [ 1]  806 	jrne	00108$
                                    807 ;	stm8s_adc1.c: 538: flagstatus = (uint8_t)(ADC1->CR3 & ADC1_CR3_OVR);
      000386 AE 54 03         [ 2]  808 	ldw	x, #0x5403
      000389 F6               [ 1]  809 	ld	a, (x)
      00038A A4 40            [ 1]  810 	and	a, #0x40
      00038C 20 4C            [ 2]  811 	jra	00109$
      00038E                        812 00108$:
                                    813 ;	stm8s_adc1.c: 540: else if ((Flag & 0xF0) == 0x10)
      00038E 7B 07            [ 1]  814 	ld	a, (0x07, sp)
      000390 A4 F0            [ 1]  815 	and	a, #0xf0
      000392 A1 10            [ 1]  816 	cp	a, #0x10
      000394 26 3E            [ 1]  817 	jrne	00105$
                                    818 ;	stm8s_adc1.c: 543: temp = (uint8_t)(Flag & (uint8_t)0x0F);
      000396 7B 04            [ 1]  819 	ld	a, (0x04, sp)
      000398 6B 01            [ 1]  820 	ld	(0x01, sp), a
                                    821 ;	stm8s_adc1.c: 544: if (temp < 8)
      00039A 7B 01            [ 1]  822 	ld	a, (0x01, sp)
      00039C A1 08            [ 1]  823 	cp	a, #0x08
      00039E 24 18            [ 1]  824 	jrnc	00102$
                                    825 ;	stm8s_adc1.c: 546: flagstatus = (uint8_t)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << temp));
      0003A0 AE 54 0D         [ 2]  826 	ldw	x, #0x540d
      0003A3 F6               [ 1]  827 	ld	a, (x)
      0003A4 95               [ 1]  828 	ld	xh, a
      0003A5 A6 01            [ 1]  829 	ld	a, #0x01
      0003A7 6B 03            [ 1]  830 	ld	(0x03, sp), a
      0003A9 7B 01            [ 1]  831 	ld	a, (0x01, sp)
      0003AB 4D               [ 1]  832 	tnz	a
      0003AC 27 05            [ 1]  833 	jreq	00132$
      0003AE                        834 00131$:
      0003AE 08 03            [ 1]  835 	sll	(0x03, sp)
      0003B0 4A               [ 1]  836 	dec	a
      0003B1 26 FB            [ 1]  837 	jrne	00131$
      0003B3                        838 00132$:
      0003B3 9E               [ 1]  839 	ld	a, xh
      0003B4 14 03            [ 1]  840 	and	a, (0x03, sp)
      0003B6 20 22            [ 2]  841 	jra	00109$
      0003B8                        842 00102$:
                                    843 ;	stm8s_adc1.c: 550: flagstatus = (uint8_t)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (temp - 8)));
      0003B8 AE 54 0C         [ 2]  844 	ldw	x, #0x540c
      0003BB F6               [ 1]  845 	ld	a, (x)
      0003BC 95               [ 1]  846 	ld	xh, a
      0003BD 7B 01            [ 1]  847 	ld	a, (0x01, sp)
      0003BF A0 08            [ 1]  848 	sub	a, #0x08
      0003C1 97               [ 1]  849 	ld	xl, a
      0003C2 A6 01            [ 1]  850 	ld	a, #0x01
      0003C4 6B 02            [ 1]  851 	ld	(0x02, sp), a
      0003C6 9F               [ 1]  852 	ld	a, xl
      0003C7 4D               [ 1]  853 	tnz	a
      0003C8 27 05            [ 1]  854 	jreq	00134$
      0003CA                        855 00133$:
      0003CA 08 02            [ 1]  856 	sll	(0x02, sp)
      0003CC 4A               [ 1]  857 	dec	a
      0003CD 26 FB            [ 1]  858 	jrne	00133$
      0003CF                        859 00134$:
      0003CF 9E               [ 1]  860 	ld	a, xh
      0003D0 14 02            [ 1]  861 	and	a, (0x02, sp)
      0003D2 20 06            [ 2]  862 	jra	00109$
      0003D4                        863 00105$:
                                    864 ;	stm8s_adc1.c: 555: flagstatus = (uint8_t)(ADC1->CSR & Flag);
      0003D4 AE 54 00         [ 2]  865 	ldw	x, #0x5400
      0003D7 F6               [ 1]  866 	ld	a, (x)
      0003D8 14 07            [ 1]  867 	and	a, (0x07, sp)
      0003DA                        868 00109$:
                                    869 ;	stm8s_adc1.c: 557: return ((FlagStatus)flagstatus);
      0003DA 5B 04            [ 2]  870 	addw	sp, #4
      0003DC 81               [ 4]  871 	ret
                                    872 ;	stm8s_adc1.c: 567: void ADC1_ClearFlag(ADC1_Flag_TypeDef Flag)
                                    873 ;	-----------------------------------------
                                    874 ;	 function ADC1_ClearFlag
                                    875 ;	-----------------------------------------
      0003DD                        876 _ADC1_ClearFlag:
      0003DD 52 03            [ 2]  877 	sub	sp, #3
                                    878 ;	stm8s_adc1.c: 574: if ((Flag & 0x0F) == 0x01)
      0003DF 7B 06            [ 1]  879 	ld	a, (0x06, sp)
      0003E1 A4 0F            [ 1]  880 	and	a, #0x0f
      0003E3 95               [ 1]  881 	ld	xh, a
      0003E4 A1 01            [ 1]  882 	cp	a, #0x01
      0003E6 26 09            [ 1]  883 	jrne	00108$
                                    884 ;	stm8s_adc1.c: 577: ADC1->CR3 &= (uint8_t)(~ADC1_CR3_OVR);
      0003E8 AE 54 03         [ 2]  885 	ldw	x, #0x5403
      0003EB F6               [ 1]  886 	ld	a, (x)
      0003EC A4 BF            [ 1]  887 	and	a, #0xbf
      0003EE F7               [ 1]  888 	ld	(x), a
      0003EF 20 5B            [ 2]  889 	jra	00110$
      0003F1                        890 00108$:
                                    891 ;	stm8s_adc1.c: 579: else if ((Flag & 0xF0) == 0x10)
      0003F1 7B 06            [ 1]  892 	ld	a, (0x06, sp)
      0003F3 A4 F0            [ 1]  893 	and	a, #0xf0
      0003F5 A1 10            [ 1]  894 	cp	a, #0x10
      0003F7 26 44            [ 1]  895 	jrne	00105$
                                    896 ;	stm8s_adc1.c: 582: temp = (uint8_t)(Flag & (uint8_t)0x0F);
                                    897 ;	stm8s_adc1.c: 583: if (temp < 8)
      0003F9 9E               [ 1]  898 	ld	a, xh
      0003FA A1 08            [ 1]  899 	cp	a, #0x08
      0003FC 24 1E            [ 1]  900 	jrnc	00102$
                                    901 ;	stm8s_adc1.c: 585: ADC1->AWSRL &= (uint8_t)~(uint8_t)((uint8_t)1 << temp);
      0003FE 90 AE 54 0D      [ 2]  902 	ldw	y, #0x540d
      000402 90 F6            [ 1]  903 	ld	a, (y)
      000404 6B 03            [ 1]  904 	ld	(0x03, sp), a
      000406 A6 01            [ 1]  905 	ld	a, #0x01
      000408 88               [ 1]  906 	push	a
      000409 9E               [ 1]  907 	ld	a, xh
      00040A 4D               [ 1]  908 	tnz	a
      00040B 27 05            [ 1]  909 	jreq	00132$
      00040D                        910 00131$:
      00040D 08 01            [ 1]  911 	sll	(1, sp)
      00040F 4A               [ 1]  912 	dec	a
      000410 26 FB            [ 1]  913 	jrne	00131$
      000412                        914 00132$:
      000412 84               [ 1]  915 	pop	a
      000413 43               [ 1]  916 	cpl	a
      000414 14 03            [ 1]  917 	and	a, (0x03, sp)
      000416 AE 54 0D         [ 2]  918 	ldw	x, #0x540d
      000419 F7               [ 1]  919 	ld	(x), a
      00041A 20 30            [ 2]  920 	jra	00110$
      00041C                        921 00102$:
                                    922 ;	stm8s_adc1.c: 589: ADC1->AWSRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (temp - 8));
      00041C 90 AE 54 0C      [ 2]  923 	ldw	y, #0x540c
      000420 90 F6            [ 1]  924 	ld	a, (y)
      000422 6B 02            [ 1]  925 	ld	(0x02, sp), a
      000424 1D 08 00         [ 2]  926 	subw	x, #2048
      000427 A6 01            [ 1]  927 	ld	a, #0x01
      000429 88               [ 1]  928 	push	a
      00042A 9E               [ 1]  929 	ld	a, xh
      00042B 4D               [ 1]  930 	tnz	a
      00042C 27 05            [ 1]  931 	jreq	00134$
      00042E                        932 00133$:
      00042E 08 01            [ 1]  933 	sll	(1, sp)
      000430 4A               [ 1]  934 	dec	a
      000431 26 FB            [ 1]  935 	jrne	00133$
      000433                        936 00134$:
      000433 84               [ 1]  937 	pop	a
      000434 43               [ 1]  938 	cpl	a
      000435 14 02            [ 1]  939 	and	a, (0x02, sp)
      000437 AE 54 0C         [ 2]  940 	ldw	x, #0x540c
      00043A F7               [ 1]  941 	ld	(x), a
      00043B 20 0F            [ 2]  942 	jra	00110$
      00043D                        943 00105$:
                                    944 ;	stm8s_adc1.c: 594: ADC1->CSR &= (uint8_t) (~Flag);
      00043D AE 54 00         [ 2]  945 	ldw	x, #0x5400
      000440 F6               [ 1]  946 	ld	a, (x)
      000441 6B 01            [ 1]  947 	ld	(0x01, sp), a
      000443 7B 06            [ 1]  948 	ld	a, (0x06, sp)
      000445 43               [ 1]  949 	cpl	a
      000446 14 01            [ 1]  950 	and	a, (0x01, sp)
      000448 AE 54 00         [ 2]  951 	ldw	x, #0x5400
      00044B F7               [ 1]  952 	ld	(x), a
      00044C                        953 00110$:
      00044C 5B 03            [ 2]  954 	addw	sp, #3
      00044E 81               [ 4]  955 	ret
                                    956 ;	stm8s_adc1.c: 616: ITStatus ADC1_GetITStatus(ADC1_IT_TypeDef ITPendingBit)
                                    957 ;	-----------------------------------------
                                    958 ;	 function ADC1_GetITStatus
                                    959 ;	-----------------------------------------
      00044F                        960 _ADC1_GetITStatus:
      00044F 52 03            [ 2]  961 	sub	sp, #3
                                    962 ;	stm8s_adc1.c: 624: if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
      000451 7B 07            [ 1]  963 	ld	a, (0x07, sp)
      000453 A4 F0            [ 1]  964 	and	a, #0xf0
      000455 97               [ 1]  965 	ld	xl, a
      000456 4F               [ 1]  966 	clr	a
      000457 95               [ 1]  967 	ld	xh, a
      000458 A3 00 10         [ 2]  968 	cpw	x, #0x0010
      00045B 26 40            [ 1]  969 	jrne	00105$
                                    970 ;	stm8s_adc1.c: 627: temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
      00045D 7B 07            [ 1]  971 	ld	a, (0x07, sp)
      00045F A4 0F            [ 1]  972 	and	a, #0x0f
      000461 95               [ 1]  973 	ld	xh, a
      000462 4F               [ 1]  974 	clr	a
                                    975 ;	stm8s_adc1.c: 628: if (temp < 8)
      000463 9E               [ 1]  976 	ld	a, xh
      000464 A1 08            [ 1]  977 	cp	a, #0x08
      000466 24 19            [ 1]  978 	jrnc	00102$
                                    979 ;	stm8s_adc1.c: 630: itstatus = (ITStatus)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << temp));
      000468 90 AE 54 0D      [ 2]  980 	ldw	y, #0x540d
      00046C 90 F6            [ 1]  981 	ld	a, (y)
      00046E 97               [ 1]  982 	ld	xl, a
      00046F A6 01            [ 1]  983 	ld	a, #0x01
      000471 6B 03            [ 1]  984 	ld	(0x03, sp), a
      000473 9E               [ 1]  985 	ld	a, xh
      000474 4D               [ 1]  986 	tnz	a
      000475 27 05            [ 1]  987 	jreq	00122$
      000477                        988 00121$:
      000477 08 03            [ 1]  989 	sll	(0x03, sp)
      000479 4A               [ 1]  990 	dec	a
      00047A 26 FB            [ 1]  991 	jrne	00121$
      00047C                        992 00122$:
      00047C 9F               [ 1]  993 	ld	a, xl
      00047D 14 03            [ 1]  994 	and	a, (0x03, sp)
      00047F 20 26            [ 2]  995 	jra	00106$
      000481                        996 00102$:
                                    997 ;	stm8s_adc1.c: 634: itstatus = (ITStatus)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (temp - 8)));
      000481 90 AE 54 0C      [ 2]  998 	ldw	y, #0x540c
      000485 90 F6            [ 1]  999 	ld	a, (y)
      000487 97               [ 1] 1000 	ld	xl, a
      000488 1D 08 00         [ 2] 1001 	subw	x, #2048
      00048B A6 01            [ 1] 1002 	ld	a, #0x01
      00048D 6B 02            [ 1] 1003 	ld	(0x02, sp), a
      00048F 9E               [ 1] 1004 	ld	a, xh
      000490 4D               [ 1] 1005 	tnz	a
      000491 27 05            [ 1] 1006 	jreq	00124$
      000493                       1007 00123$:
      000493 08 02            [ 1] 1008 	sll	(0x02, sp)
      000495 4A               [ 1] 1009 	dec	a
      000496 26 FB            [ 1] 1010 	jrne	00123$
      000498                       1011 00124$:
      000498 9F               [ 1] 1012 	ld	a, xl
      000499 14 02            [ 1] 1013 	and	a, (0x02, sp)
      00049B 20 0A            [ 2] 1014 	jra	00106$
      00049D                       1015 00105$:
                                   1016 ;	stm8s_adc1.c: 639: itstatus = (ITStatus)(ADC1->CSR & (uint8_t)ITPendingBit);
      00049D AE 54 00         [ 2] 1017 	ldw	x, #0x5400
      0004A0 F6               [ 1] 1018 	ld	a, (x)
      0004A1 6B 01            [ 1] 1019 	ld	(0x01, sp), a
      0004A3 7B 07            [ 1] 1020 	ld	a, (0x07, sp)
      0004A5 14 01            [ 1] 1021 	and	a, (0x01, sp)
      0004A7                       1022 00106$:
                                   1023 ;	stm8s_adc1.c: 641: return ((ITStatus)itstatus);
      0004A7 5B 03            [ 2] 1024 	addw	sp, #3
      0004A9 81               [ 4] 1025 	ret
                                   1026 ;	stm8s_adc1.c: 662: void ADC1_ClearITPendingBit(ADC1_IT_TypeDef ITPendingBit)
                                   1027 ;	-----------------------------------------
                                   1028 ;	 function ADC1_ClearITPendingBit
                                   1029 ;	-----------------------------------------
      0004AA                       1030 _ADC1_ClearITPendingBit:
      0004AA 52 02            [ 2] 1031 	sub	sp, #2
                                   1032 ;	stm8s_adc1.c: 669: if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
      0004AC 7B 06            [ 1] 1033 	ld	a, (0x06, sp)
      0004AE A4 F0            [ 1] 1034 	and	a, #0xf0
      0004B0 97               [ 1] 1035 	ld	xl, a
      0004B1 4F               [ 1] 1036 	clr	a
      0004B2 95               [ 1] 1037 	ld	xh, a
      0004B3 A3 00 10         [ 2] 1038 	cpw	x, #0x0010
      0004B6 26 4A            [ 1] 1039 	jrne	00105$
                                   1040 ;	stm8s_adc1.c: 672: temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
      0004B8 7B 06            [ 1] 1041 	ld	a, (0x06, sp)
      0004BA A4 0F            [ 1] 1042 	and	a, #0x0f
      0004BC 95               [ 1] 1043 	ld	xh, a
      0004BD 4F               [ 1] 1044 	clr	a
                                   1045 ;	stm8s_adc1.c: 673: if (temp < 8)
      0004BE 9E               [ 1] 1046 	ld	a, xh
      0004BF A1 08            [ 1] 1047 	cp	a, #0x08
      0004C1 24 1E            [ 1] 1048 	jrnc	00102$
                                   1049 ;	stm8s_adc1.c: 675: ADC1->AWSRL &= (uint8_t)~(uint8_t)((uint8_t)1 << temp);
      0004C3 90 AE 54 0D      [ 2] 1050 	ldw	y, #0x540d
      0004C7 90 F6            [ 1] 1051 	ld	a, (y)
      0004C9 6B 02            [ 1] 1052 	ld	(0x02, sp), a
      0004CB A6 01            [ 1] 1053 	ld	a, #0x01
      0004CD 88               [ 1] 1054 	push	a
      0004CE 9E               [ 1] 1055 	ld	a, xh
      0004CF 4D               [ 1] 1056 	tnz	a
      0004D0 27 05            [ 1] 1057 	jreq	00122$
      0004D2                       1058 00121$:
      0004D2 08 01            [ 1] 1059 	sll	(1, sp)
      0004D4 4A               [ 1] 1060 	dec	a
      0004D5 26 FB            [ 1] 1061 	jrne	00121$
      0004D7                       1062 00122$:
      0004D7 84               [ 1] 1063 	pop	a
      0004D8 43               [ 1] 1064 	cpl	a
      0004D9 14 02            [ 1] 1065 	and	a, (0x02, sp)
      0004DB AE 54 0D         [ 2] 1066 	ldw	x, #0x540d
      0004DE F7               [ 1] 1067 	ld	(x), a
      0004DF 20 30            [ 2] 1068 	jra	00107$
      0004E1                       1069 00102$:
                                   1070 ;	stm8s_adc1.c: 679: ADC1->AWSRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (temp - 8));
      0004E1 90 AE 54 0C      [ 2] 1071 	ldw	y, #0x540c
      0004E5 90 F6            [ 1] 1072 	ld	a, (y)
      0004E7 6B 01            [ 1] 1073 	ld	(0x01, sp), a
      0004E9 1D 08 00         [ 2] 1074 	subw	x, #2048
      0004EC A6 01            [ 1] 1075 	ld	a, #0x01
      0004EE 88               [ 1] 1076 	push	a
      0004EF 9E               [ 1] 1077 	ld	a, xh
      0004F0 4D               [ 1] 1078 	tnz	a
      0004F1 27 05            [ 1] 1079 	jreq	00124$
      0004F3                       1080 00123$:
      0004F3 08 01            [ 1] 1081 	sll	(1, sp)
      0004F5 4A               [ 1] 1082 	dec	a
      0004F6 26 FB            [ 1] 1083 	jrne	00123$
      0004F8                       1084 00124$:
      0004F8 84               [ 1] 1085 	pop	a
      0004F9 43               [ 1] 1086 	cpl	a
      0004FA 14 01            [ 1] 1087 	and	a, (0x01, sp)
      0004FC AE 54 0C         [ 2] 1088 	ldw	x, #0x540c
      0004FF F7               [ 1] 1089 	ld	(x), a
      000500 20 0F            [ 2] 1090 	jra	00107$
      000502                       1091 00105$:
                                   1092 ;	stm8s_adc1.c: 684: ADC1->CSR &= (uint8_t)((uint16_t)~(uint16_t)ITPendingBit);
      000502 AE 54 00         [ 2] 1093 	ldw	x, #0x5400
      000505 F6               [ 1] 1094 	ld	a, (x)
      000506 1E 05            [ 2] 1095 	ldw	x, (0x05, sp)
      000508 53               [ 2] 1096 	cplw	x
      000509 89               [ 2] 1097 	pushw	x
      00050A 14 02            [ 1] 1098 	and	a, (2, sp)
      00050C 85               [ 2] 1099 	popw	x
      00050D AE 54 00         [ 2] 1100 	ldw	x, #0x5400
      000510 F7               [ 1] 1101 	ld	(x), a
      000511                       1102 00107$:
      000511 5B 02            [ 2] 1103 	addw	sp, #2
      000513 81               [ 4] 1104 	ret
                                   1105 	.area CODE
                                   1106 	.area INITIALIZER
                                   1107 	.area CABS (ABS)
